// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: sensor.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SensorReading message with at least 7 sensor fields
type SensorReading struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SensorId        string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	Type            string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // e.g., "soil", "weather", "tank", "well"
	Timestamp       string                 `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SoilMoisture    float64                `protobuf:"fixed64,4,opt,name=soil_moisture,json=soilMoisture,proto3" json:"soil_moisture,omitempty"`
	SoilTemperature float64                `protobuf:"fixed64,5,opt,name=soil_temperature,json=soilTemperature,proto3" json:"soil_temperature,omitempty"`
	AirTemperature  float64                `protobuf:"fixed64,6,opt,name=air_temperature,json=airTemperature,proto3" json:"air_temperature,omitempty"`
	Humidity        float64                `protobuf:"fixed64,7,opt,name=humidity,proto3" json:"humidity,omitempty"`
	WaterTankLevel  float64                `protobuf:"fixed64,8,opt,name=water_tank_level,json=waterTankLevel,proto3" json:"water_tank_level,omitempty"`
	WellDepth       float64                `protobuf:"fixed64,9,opt,name=well_depth,json=wellDepth,proto3" json:"well_depth,omitempty"`
	PumpFlowRate    float64                `protobuf:"fixed64,10,opt,name=pump_flow_rate,json=pumpFlowRate,proto3" json:"pump_flow_rate,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SensorReading) Reset() {
	*x = SensorReading{}
	mi := &file_sensor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorReading) ProtoMessage() {}

func (x *SensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorReading.ProtoReflect.Descriptor instead.
func (*SensorReading) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *SensorReading) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorReading) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SensorReading) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *SensorReading) GetSoilMoisture() float64 {
	if x != nil {
		return x.SoilMoisture
	}
	return 0
}

func (x *SensorReading) GetSoilTemperature() float64 {
	if x != nil {
		return x.SoilTemperature
	}
	return 0
}

func (x *SensorReading) GetAirTemperature() float64 {
	if x != nil {
		return x.AirTemperature
	}
	return 0
}

func (x *SensorReading) GetHumidity() float64 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *SensorReading) GetWaterTankLevel() float64 {
	if x != nil {
		return x.WaterTankLevel
	}
	return 0
}

func (x *SensorReading) GetWellDepth() float64 {
	if x != nil {
		return x.WellDepth
	}
	return 0
}

func (x *SensorReading) GetPumpFlowRate() float64 {
	if x != nil {
		return x.PumpFlowRate
	}
	return 0
}

// Ack message shared across services
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_sensor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *Ack) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_sensor_proto protoreflect.FileDescriptor

const file_sensor_proto_rawDesc = "" +
	"\n" +
	"\fsensor.proto\x12\tsmartfarm\"\xe2\x02\n" +
	"\rSensorReading\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\x12#\n" +
	"\rsoil_moisture\x18\x04 \x01(\x01R\fsoilMoisture\x12)\n" +
	"\x10soil_temperature\x18\x05 \x01(\x01R\x0fsoilTemperature\x12'\n" +
	"\x0fair_temperature\x18\x06 \x01(\x01R\x0eairTemperature\x12\x1a\n" +
	"\bhumidity\x18\a \x01(\x01R\bhumidity\x12(\n" +
	"\x10water_tank_level\x18\b \x01(\x01R\x0ewaterTankLevel\x12\x1d\n" +
	"\n" +
	"well_depth\x18\t \x01(\x01R\twellDepth\x12$\n" +
	"\x0epump_flow_rate\x18\n" +
	" \x01(\x01R\fpumpFlowRate\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage2Q\n" +
	"\rSensorService\x12@\n" +
	"\x10StreamSensorData\x12\x18.smartfarm.SensorReading\x1a\x0e.smartfarm.Ack\"\x00(\x01B3Z1github.com/fermat01/smart-farm-iot-platform/pb;pbb\x06proto3"

var (
	file_sensor_proto_rawDescOnce sync.Once
	file_sensor_proto_rawDescData []byte
)

func file_sensor_proto_rawDescGZIP() []byte {
	file_sensor_proto_rawDescOnce.Do(func() {
		file_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sensor_proto_rawDesc), len(file_sensor_proto_rawDesc)))
	})
	return file_sensor_proto_rawDescData
}

var file_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sensor_proto_goTypes = []any{
	(*SensorReading)(nil), // 0: smartfarm.SensorReading
	(*Ack)(nil),           // 1: smartfarm.Ack
}
var file_sensor_proto_depIdxs = []int32{
	0, // 0: smartfarm.SensorService.StreamSensorData:input_type -> smartfarm.SensorReading
	1, // 1: smartfarm.SensorService.StreamSensorData:output_type -> smartfarm.Ack
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sensor_proto_init() }
func file_sensor_proto_init() {
	if File_sensor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sensor_proto_rawDesc), len(file_sensor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sensor_proto_goTypes,
		DependencyIndexes: file_sensor_proto_depIdxs,
		MessageInfos:      file_sensor_proto_msgTypes,
	}.Build()
	File_sensor_proto = out.File
	file_sensor_proto_goTypes = nil
	file_sensor_proto_depIdxs = nil
}
